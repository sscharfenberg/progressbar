{"version":3,"file":"progressbar.min.js","sources":["src/progressbar.js"],"sourcesContent":["/*!\n * @sscharfenberg/progressbar\n * Simple, accessible progressbar to visualize request status\n * @version 1.0.0\n */\n\n/******************************************************************************\n * INTERNAL VARIABLES\n *****************************************************************************/\n\n/**\n * defaultSettings\n * @type {Object}\n */\nconst defaultSettings = {\n    debug: false, // true = console.log messages, false = none.\n    trickle: true, // whether to increase the progressbar gradually to give the illusion something is happening.\n    trickleSpeed: 800, // each trickleSpeed ms, the trickle function gets executed.\n    trickleRate: 0.02, // Math.random * trickleRate = increase for trickle\n    startingValue: 0.1, // starting value of progressbar\n    parent: \"main\", // the querySelector for the DOM node where the progressbar is appended\n    barSelector: \".progressbar__bar\", // the querySelector for the visual bar\n    ariaLabel: \"Loading progress\", // aria label, needed for accessibility.\n    minValue: 0.1, // the minimum value for the progressbar\n    maxValue: 0.994, // the maximum value for the progressbar\n    template: `<div id=\"progressbar\" class=\"progressbar\" role=\"progressbar\" aria-label=\"\" aria-valuemin=\"0\" aria-valuemax=\"100\" aria-valuenow=\"\">\n    <div class=\"progressbar__bar\"></div>\n</div>` // html template for the progressbar\n};\n\n/**\n * settings - live object for the settings\n * @type {Object}\n */\nlet settings = {};\n\n/**\n * currentValue - live number of current value between 0 and 1\n * @type {number}\n */\nlet currentValue;\n\n/*****************************************************************************\n * HELPERS\n *****************************************************************************/\n\n/**\n * @function stringToHTML - converts a template string into HTML DOM nodes\n * depends on https://caniuse.com/mdn-api_domparser_parsefromstring\n * @param  {String} str The template string\n * @return {HTMLElement} The template HTML node\n */\nconst stringToHTML = str => {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(str, \"text/html\");\n    return doc.body.querySelector(\"body > *\"); // we don't need the html body, just the newly created nodes.\n};\n\n/**\n * @function clamp - return a value clamped to min and max:\n * if the value is below min, return min.\n * if the value is above max, return max.\n * otherwise, return value.\n * @param {number} val\n * @param {number} min\n * @param {number} max\n * @returns {number}\n */\nconst clamp = (val, min = 0, max = 1) => Math.min(Math.max(val, min), max);\n\n/******************************************************************************\n * MAIN FUNCTIONS\n *****************************************************************************/\n\n/**\n * @function configure - prepare settings variable with correct contents:\n * either defaultSettings or user supplied options\n * @param options\n */\nconst configure = options => {\n    settings = defaultSettings;\n    for (const [key, value] of Object.entries(options)) {\n        if (value !== undefined && key in options) settings[key] = value;\n    }\n    currentValue = settings.startingValue;\n    settings.debug && console.log(\"configured to\", settings);\n};\n\n/**\n * @function progressNode - get HTMLElement of .progressbar\n * @returns {HTMLElement | null}\n */\nconst progressNode = () => document.getElementById(\"progressbar\");\n\n/**\n * @function barNode - get HTMLElement of .progressbar\n * @returns {HTMLElement | null}\n */\nconst barNode = () => progressNode()?.querySelector(settings.barSelector);\n\n/**\n * @function createBar - create new progressbar with value\n */\nconst createBar = () => {\n    const _progressbar = stringToHTML(settings.template);\n    _progressbar.ariaLabel = settings.ariaLabel;\n    document.querySelector(settings.parent).appendChild(_progressbar);\n};\n\n/**\n * @function start - start progressbar\n */\nconst start = () => {\n    const work = () => {\n        setTimeout(function () {\n            settings.debug && console.log(\"working...\");\n            if (!doesProgressBarExist()) return;\n            trickle();\n            work();\n        }, settings.trickleSpeed);\n    };\n    if (!doesProgressBarExist()) createBar();\n    if (settings.trickle) work();\n};\n\n/**\n * @function update - update existing progressbar with value\n * @param {Number} value - value between 0 (= 0%) and 1 (= 100%)\n */\nconst update = value => {\n    const percentage = (value * 100).toFixed(2);\n    const _progress = progressNode();\n    const _bar = barNode();\n    currentValue = value; // update internal var\n    settings.debug && console.log(`updating currentValue to ${value}, ${percentage}%`);\n    // update CSS custom property to increase visual length of progressbar\n    _bar.style.setProperty(\"--bar-percentage\", percentage + \"%\");\n    // update aria value\n    _progress.ariaValueNow = percentage;\n};\n\n/**\n * @function trickle - increase bar by random amount\n */\nconst trickle = () => inc(Math.random() * settings.trickleRate);\n\n/**\n * @function inc - increase progressbar by a set amount\n * @param amount\n */\nconst inc = amount => {\n    let newValue = currentValue;\n    if (typeof amount !== \"number\") {\n        amount = (1 - newValue) * clamp(Math.random() * newValue, settings.minValue, settings.maxValue);\n    }\n    newValue = clamp(newValue + amount, settings.minValue, settings.maxValue);\n    settings.debug && console.log(`increase ${currentValue} by ${amount} to ${newValue}`);\n    return update(newValue);\n};\n\n/******************************************************************************\n * EXPORTS\n *****************************************************************************/\n\n/**\n * @function setProgress - set progress bar to value\n * lower limit = 0, upper limit = 1\n * @param {Number} value - value between 0 (= 0%) and 1 (= 100%)\n */\nexport const setProgress = value => {\n    if (doesProgressBarExist()) {\n        update(clamp(value, 0.1, 0.994));\n        if (value >= 1) finishProgress();\n    }\n};\n\n/**\n * @function startProgress - starts the progress bar\n * @param options\n */\nexport const startProgress = options => {\n    if (doesProgressBarExist()) return;\n    else {\n        configure(options);\n        start();\n    }\n};\n\n/**\n * @function checks if progressbar exists\n * @returns {boolean}\n */\nexport const doesProgressBarExist = () => progressNode() !== null;\n\n/**\n * @function finishProgress - function to be called when the progress is finished.\n * set to 100%, cleanup\n */\nexport const finishProgress = () => {\n    update(1);\n    setTimeout(() => {\n        progressNode()?.remove();\n    }, 250);\n};\n"],"names":["defaultSettings","debug","trickle","trickleSpeed","trickleRate","startingValue","parent","barSelector","ariaLabel","minValue","maxValue","template","currentValue","settings","clamp","val","min","max","Math","progressNode","document","getElementById","createBar","_progressbar","str","DOMParser","parseFromString","body","querySelector","appendChild","update","value","percentage","toFixed","_progress","_bar","console","log","style","setProperty","ariaValueNow","inc","random","amount","newValue","setProgress","doesProgressBarExist","finishProgress","startProgress","options","key","Object","entries","undefined","configure","work","setTimeout","start","remove"],"mappings":";;;;;AAcA,MAAMA,EAAkB,CACpBC,OAAO,EACPC,SAAS,EACTC,aAAc,IACdC,YAAa,IACbC,cAAe,GACfC,OAAQ,OACRC,YAAa,oBACbC,UAAW,mBACXC,SAAU,GACVC,SAAU,KACVC,SAAU,wLASd,IAMIC,EANAC,EAAW,CAAA,EAkBf,MAgBMC,EAAQ,CAACC,EAAKC,EAAM,EAAGC,EAAM,IAAMC,KAAKF,IAAIE,KAAKD,IAAIF,EAAKC,GAAMC,GAwBhEE,EAAe,IAAMC,SAASC,eAAe,eAW7CC,EAAY,KACd,MAAMC,GApDWC,EAoDiBX,EAASF,UAnD5B,IAAIc,WACAC,gBAAgBF,EAAK,aAC7BG,KAAKC,cAAc,aAHbJ,MAqDjBD,EAAaf,UAAYK,EAASL,UAClCY,SAASQ,cAAcf,EAASP,QAAQuB,YAAYN,EAAa,EAuB/DO,EAASC,IACX,MAAMC,GAAsB,IAARD,GAAaE,QAAQ,GACnCC,EAAYf,IACZgB,EAlCYhB,KAAgBS,cAAcf,EAASN,aAmCzDK,EAAemB,EACflB,EAASZ,OAASmC,QAAQC,IAAI,4BAA4BN,MAAUC,MAEpEG,EAAKG,MAAMC,YAAY,mBAAoBP,EAAa,KAExDE,EAAUM,aAAeR,CAAU,EAMjC9B,EAAU,IAAMuC,EAAIvB,KAAKwB,SAAW7B,EAAST,aAM7CqC,EAAME,IACR,IAAIC,EAAWhC,EAMf,MALsB,iBAAX+B,IACPA,GAAU,EAAIC,GAAY9B,EAAMI,KAAKwB,SAAWE,EAAU/B,EAASJ,SAAUI,EAASH,WAE1FkC,EAAW9B,EAAM8B,EAAWD,EAAQ9B,EAASJ,SAAUI,EAASH,UAChEG,EAASZ,OAASmC,QAAQC,IAAI,YAAYzB,QAAmB+B,QAAaC,KACnEd,EAAOc,EAAS,EAYdC,EAAcd,IACnBe,MACAhB,EAAOhB,EAAMiB,EAAO,GAAK,OACrBA,GAAS,GAAGgB,IACnB,EAOQC,EAAgBC,IACrBH,MAtGUG,KACdpC,EAAWb,EACX,IAAK,MAAOkD,EAAKnB,KAAUoB,OAAOC,QAAQH,QACxBI,IAAVtB,GAAuBmB,KAAOD,IAASpC,EAASqC,GAAOnB,GAE/DnB,EAAeC,EAASR,cACxBQ,EAASZ,OAASmC,QAAQC,IAAI,gBAAiBxB,EAAS,EAkGpDyC,CAAUL,GAvEJ,MACV,MAAMM,EAAO,KACTC,YAAW,WACP3C,EAASZ,OAASmC,QAAQC,IAAI,cACzBS,MACL5C,IACAqD,IACZ,GAAW1C,EAASV,aAAa,EAExB2C,KAAwBxB,IACzBT,EAASX,SAASqD,GAAM,EA8DxBE,GACH,EAOQX,EAAuB,IAAyB,OAAnB3B,IAM7B4B,EAAiB,KAC1BjB,EAAO,GACP0B,YAAW,KACPrC,KAAgBuC,QAAQ,GACzB,IAAI"}