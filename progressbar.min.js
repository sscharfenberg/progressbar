/*!
 * @sscharfenberg/progressbar
 * Simple, accessible progressbar to visualize request status
 * @version 1.0.0
 */
const e={debug:!1,trickle:!0,trickleSpeed:800,trickleRate:.02,startingValue:.1,parent:"main",barSelector:".progressbar__bar",ariaLabel:"Loading progress",minValue:.1,maxValue:.994,template:'<div id="progressbar" class="progressbar" role="progressbar" aria-label="" aria-valuemin="0" aria-valuemax="100" aria-valuenow="">\n    <div class="progressbar__bar"></div>\n</div>'};let r,a={};const t=(e,r=0,a=1)=>Math.min(Math.max(e,r),a),o=()=>document.getElementById("progressbar"),l=()=>{const e=(r=a.template,(new DOMParser).parseFromString(r,"text/html").body.querySelector("body > *"));var r;e.ariaLabel=a.ariaLabel,document.querySelector(a.parent).appendChild(e)},n=e=>{const t=(100*e).toFixed(2),l=o(),n=o()?.querySelector(a.barSelector);r=e,a.debug&&console.log(`updating currentValue to ${e}, ${t}%`),n.style.setProperty("--bar-percentage",t+"%"),l.ariaValueNow=t},i=()=>s(Math.random()*a.trickleRate),s=e=>{let o=r;return"number"!=typeof e&&(e=(1-o)*t(Math.random()*o,a.minValue,a.maxValue)),o=t(o+e,a.minValue,a.maxValue),a.debug&&console.log(`increase ${r} by ${e} to ${o}`),n(o)},u=e=>{d()&&(n(t(e,.1,.994)),e>=1&&b())},c=t=>{d()||((t=>{a=e;for(const[e,r]of Object.entries(t))void 0!==r&&e in t&&(a[e]=r);r=a.startingValue,a.debug&&console.log("configured to",a)})(t),(()=>{const e=()=>{setTimeout((function(){a.debug&&console.log("working..."),d()&&(i(),e())}),a.trickleSpeed)};d()||l(),a.trickle&&e()})())},d=()=>null!==o(),b=()=>{n(1),setTimeout((()=>{o()?.remove()}),250)};export{d as doesProgressBarExist,b as finishProgress,u as setProgress,c as startProgress};
//# sourceMappingURL=progressbar.min.js.map
